[["index.html", "Mètodes Estadístics Aplicats a Ciències Polítiques Introducció Lectura recomanada", " Mètodes Estadístics Aplicats a Ciències Polítiques Ferran Carrascosa Mallafrè 2021-01-03 Introducció Aquest material, si ve té un enfocament genèric danàlisis, en diferents capítols, tant per les dades escollides com per les preguntes danalisis sha enfocat a alumnes de Cìencies Polítiques. Aquest llibre digital es troba sota la llicencia Reconeixement-NoComercial-SenseObraDerivada 4.0 Internacional (CC BY-NC-ND 4.0). Lectura recomanada La lectura recomanada per lestudiant de Ciències Polítiques amb un nivell bàsic en lús de R, es el següent: 1 5 6 9 10 11 12 13 14 Per tal de repasar els elements de R importants per el curs es recomana: 2 3 4 8 Lestudiant que vulgui aprofundir en les tasques de preparació de dades: 7 "],["agraïments.html", "Agraïments", " Agraïments Els meus agraïments per Albert Satorra pels ja més de 15 anys compartint docència tant a la facultat de Ciències Polítiques, com a les facultats dEconomia y ADE a la UPF. "],["postapunt.html", "Capítol 1 Posta a punt 1.1 R 1.2 RStudio 1.3 Paquets de R 1.4 Rmarkdown (*.Rmd) 1.5 Actividad guiada 1.1", " Capítol 1 Posta a punt 1.1 R R és GNU i per tant Programari lliure). És un entorn i llenguatge per a als gràfics i la computació estadística. Si bien R funciona perfectamente des de consola de texto (R-GUI en windows o bien, ejecutando comando R desde xterm en Linux) en el curso se utilizará la interfaz gráfica de RStudio. Ejecuta la siguiente línea. 6 / (4 - 1) ## [1] 2 Puedes recuperar las líneas ejecutadas previamente apretando la tecla Arriba del cursor. Pots instalar R tant en Linux, Mac com e Windows des de: https://cran.r-project.org/ . Para pedir ayuda sobre una función hay 2 opciones: Con un ? ?read.table Con dos ? ??excel 1.2 RStudio El lenguaje R se puede escribir mediante editor de texto en ficheros con extensión *.R. El entorno RStudio (ver imagen), incorpora, además de un editor y de la consola de R, un conjunto de utilidades que facilitan las tareas de programación y análisis de datos: navegador de ficheros, ayuda, objetos en memoria, visor de gráficos Figura 1.1: Entorno RStudio (Fuente: Elaboración propia). Per programar en R utilitzarem el IDE RStudio. Un cop hagis instal·lat R, pots instalar RStudio des de: https://rstudio.com/products/rstudio/download/#download . Las combinaciones de teclas disponibles: Alt + Shift + K Ejecutar código: Ctrl + Enter Ir a la ventana de código: Ctrl + 1 Ir a la consola: Ctrl + 2 1.2.1 Crear un proyecto Opcionalmente, resulta útil crear un proyecto en RSTudio descargando el material y datos de este curso, des de la plataforma GitHub (compartir código y datos). Los pasos son los sigientes: File &gt; New Project Versión Control &gt; Git Repository URL: https://github.com/griu/meacp.git Figura 1.2: Crear proyecto Git del Curso (Fuente: Elaboración propia). Alternativamente, puedes descargar el material des del navegador y crear un proyecto de RSTudio: Descargar el material des del enlace: https://github.com/griu/meacp Code -&gt; Download Zip Descomprimir el código Crear el proyecto des de R File -&gt; New Project  -&gt; New Directory -&gt; New project Buscar la carpeta con el código descomprimido 1.3 Paquets de R Hi ha tota una comunitat de desenvolupadors que amplien les funcionalitats de R a través de llibreries o paquets. Per utilizar auquests funcionalitats, primer es necesari instalar els paquets. Se publican en CRAN, un repositorio centralizado. Actualmente contiene más de 16 mil paquetes. Los más importantes, como stats, graphics, methods, base... están ya disponibles en la consola. Otros, por ejemplo foreign (leer datos de fuentes externas), vienen instalados, pero es necesario cargarlos con library(foreign) al abrir la sesión. Otros, la mayoría, es necesario instalarlos antes con install.packages(\"nombre_paquete\"). A continuació, fes la instal·lació dels següents paquetes, executant, duna en una, cadascuna de les següent comandes des de la consola de R o RStudio: install.packages(&quot;pander&quot;) install.packages(&quot;kableExtra&quot;) install.packages(&quot;tidyverse&quot;) install.packages(&quot;ggrepel&quot;) install.packages(&quot;ggcorrplot&quot;) install.packages(&#39;rmarkdown&#39;) install.packages(&quot;DT&quot;) install.packages(&quot;plotly&quot;) install.packages(&quot;cowplot&quot;) install.packages(&quot;car&quot;) install.packages(&quot;corrplot&quot;) install.packages(&quot;FactoMineR&quot;) install.packages(&quot;factoextra&quot;) install.packages(&quot;quantreg&quot;) install.packages(&quot;psych&quot;) install.packages(&quot;mice&quot;) install.packages(&quot;cluster&quot;) install.packages(&quot;readxl&quot;) install.packages(&quot;remotes&quot;) install.packages(&quot;WDI&quot;) install.packages(&quot;gapminder&quot;) install.packages(&quot;datos&quot;) install.packages(&quot;HistData&quot;) install.packages(&quot;poliscidata&quot;) 1.4 Rmarkdown (*.Rmd) Puedes generar de forma dinámica documentos PDF, Word (como éste que estás leyendo) o HTML mediante ficheros de tipo Rmarkdown (*.Rmd). Este formato, permite combinar texto con formato, código R y resultados (tablas y gráfcos) ejecutados por R. Puedes acceder al materialdel curso en formato Bookdown (un tipo de RMarkdown) en Github.. Comandos Rmarkdown R chunks: ```{r, options} CODIGO R ```: echo, eval, fig.cap, warning, message. Opciones: include = FALSE : Ejecuta pero no muestra el código ni resultados. echo = FALSE : No muestra el código, pero sí el resultado (tablas, gráficos). fig.cap = \"...\" : Añade un texto al pie de imagen. R inline: ` r CODIGO R` Titulo: # TITULO1, ## TITULO2 Emphasis: Negrita con **string** . Cursiva con *string* Link externo: [texto enlace](http://url) Imagen: ![texto alternativo](url imagen o ruta del a imagen) Lista de puntos: Al inicio de línea, usa guion - Lista numerada: Al inicio, pon 1. Código látex: $x^2$. Salida: \\(x^2\\) Línea en blanco: Una linea nueva con &lt;br&gt; Sangrado (Indented): Al incio de línea, usa símbolo &gt; Tablas: kintr::kable(tabla) Puedes ver la hoja resumen y la Guía completa. Recomendaciones Recomendaciones Enriquece los informes con elmentos RMarkdown: Listas, cursiva Combina código y texto con: inline R. Configura las Tablas de contenidos. Utiliza caption en tablas y gráficos. Muestra sólo el código indispensable. Los Gráficos con título (global y ejes) y leyenda. Actividad guiada 1.1 Genera tu primer documento RMarkdown. En RStudio, accede al menú File &gt; New File &gt; R Markdown &gt; Documentos &gt; html y edita Titley Author del formulario de la imagen y el formato de salida HTML &gt; aprieta OK. Figura 1.3: Menú de nuevo RMarkdown (Fuente: Elaboración propia). Guarda el documento generado automáticamente con el nombre 11_actividad.Rmd. Ahora genera el documento apretando el botón Knit. Puedes ver la solución en 1.5 . 1.5 Actividad guiada 1.1 --- title: &quot;Actividad 1.1.&quot; author: &quot;FC&quot; date: &quot;8/15/2020&quot; output: html_document --- 1.5.1 R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: # Utiliza el comando summary para mostrar un resumen general de cars summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 1.5.2 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. "],["basics.html", "Capítol 2 Elementos básicos 2.1 Objetos de R 2.2 Scripts 2.3 Actividad guiada 1.2", " Capítol 2 Elementos básicos Aunque se presuponen unos conocimientos iniciales de R, a continuación se hace un repaso de R y RStudio. 2.1 Objetos de R Asignar objetos Puedes asignar datos a objetos R. Estos objetos se guardan en memoria. a &lt;- 0 a ## [1] 0 b &lt;- a + 1 b ## [1] 1 Se puede utilizar = , pero, en R se usa &lt;- para diferenciarlo de los valores de los parámetros de las funciones. Consulta la guía de estilo de Tydiverse para crear nombres de objetos. Listar objetos Los objetos aparecen en la pestaña de environment (ventana superior derecha). También puedes acceder al listado con la función ls(). ls() ## [1] &quot;a&quot; &quot;a_comparte&quot; &quot;a_full&quot; &quot;a_inner&quot; &quot;a_left&quot; ## [6] &quot;a_right&quot; &quot;a1&quot; &quot;a2&quot; &quot;aaa&quot; &quot;agg1&quot; ## [11] &quot;agg2&quot; &quot;agg3&quot; &quot;b&quot; &quot;color_ojos&quot; &quot;colores_continente&quot; ## [16] &quot;consulta&quot; &quot;continentes_anio&quot; &quot;describir&quot; &quot;etiquetas_paises&quot; &quot;fit&quot; ## [21] &quot;fit0&quot; &quot;fit1&quot; &quot;fit2&quot; &quot;fit3&quot; &quot;fit4&quot; ## [26] &quot;fwf_sample&quot; &quot;Galton&quot; &quot;indices_ordenacion&quot; &quot;mtcars&quot; &quot;p00&quot; ## [31] &quot;p07&quot; &quot;p1&quot; &quot;p2&quot; &quot;p3&quot; &quot;p4&quot; ## [36] &quot;pais07dplyr&quot; &quot;paises_informe&quot; &quot;paises07&quot; &quot;paises07_2VAR&quot; &quot;paises07NA&quot; ## [41] &quot;paises07Ord&quot; &quot;paises07Summ&quot; &quot;paisesDup&quot; &quot;resumen&quot; &quot;tabla1&quot; Guardar objetos Los objetos R, se pueden guardar en ficheros .RData con save(). save(a, b, file=&quot;www/temp/ejemploSave.RData&quot;) save.image(file=\"www/temp/ejemploSave.RData\") guarda todos lo objetos del environment actual Borrar objetos Se pueden borrar de la memoria con rm(): rm(a,b) rm(list=ls()) # borra todo el environment. ls() ## character(0) Cargar objetos Para cargar en memoria de nuevo los objetos, se utiliza load(): load(&quot;www/temp/ejemploSave.RData&quot;) ls() ## [1] &quot;a&quot; &quot;b&quot; Actividad guiada 1.2. Consiste en comprender la evolución de la riqueza y la esperanza de vida de las personas a nivel de país y continente. Para ello, contamos con los datos de países coleccionados por Gapminder y traducidos al Castellano en el package datos. suppressPackageStartupMessages(library(tidyverse)) library(datos) library(knitr) paises07 &lt;- as.data.frame(paises %&gt;% filter(anio==2007)) kable(paises07 %&gt;% head(10), caption = &quot;Datos de Gapminder&quot;) Taula 2.1: Datos de Gapminder pais continente anio esperanza_de_vida poblacion pib_per_capita Afganistán Asia 2007 43.828 31889923 974.5803 Albania Europa 2007 76.423 3600523 5937.0295 Argelia África 2007 72.301 33333216 6223.3675 Angola África 2007 42.731 12420476 4797.2313 Argentina Américas 2007 75.320 40301927 12779.3796 Australia Oceanía 2007 81.235 20434176 34435.3674 Austria Europa 2007 79.829 8199783 36126.4927 Baréin Asia 2007 75.635 708573 29796.0483 Bangladesh Asia 2007 64.062 150448339 1391.2538 Bélgica Europa 2007 79.441 10392226 33692.6051 Los datos muestran la esperanza de vida media en 142 países, población total y su nivel de riqueza medido con el Producto Interior Bruto (PIB) per cápita. Vamos a crear un resumen HTML de la esperanza_de_vida y el pib_per_capita en 2007 con datos de países del package datos. Puedes ver la solución en 2.3 . 2.2 Scripts Para crear un nuevo script de R puedes ir al menú: File &gt; New File &gt; R Script. Por ejemplo, escribe: print(&quot;Hello World!&quot;) Ejecuta la línea situando el cursor encima y clica el botón Run (o Ctrl + Enter). Guardar tu código: File &gt; Save as &gt; nombre del fichero.R (www/temp/holaMundo.R). Ejecuta tu código con source(). cat(&#39;print(&quot;Hello World!&quot;)&#39;, file=&quot;www/temp/holaMundo.R&quot;) source(&quot;www/temp/holaMundo.R&quot;) ## [1] &quot;Hello World!&quot; Si no utilizas print(), al realizar source(), no va a devolver ningún valor por pantalla. 2.3 Actividad guiada 1.2 --- title: &quot;Actividad 1.2&quot; output: html_document --- library(knitr) library(datos) suppressPackageStartupMessages(library(tidyverse)) knitr::opts_chunk$set(echo = TRUE) # DATOS: Esto se explica mas adelante en el temario paises07_2VAR &lt;- paises %&gt;% filter(anio==2007) %&gt;% dplyr::select(pib_per_capita, esperanza_de_vida) 2.3.1 Gráfico de dispersión de países plot(paises07_2VAR, type = &quot;p&quot;, col = &quot;red&quot;, pch=19 , main = &quot;Países (Año: 2007)&quot; , xlab = &quot;PIB per cápita ($ americanos, ajustados según inflación)&quot; , ylab = &quot;Esperanza de vida (años)&quot;, cex.main=1) Figura 2.1: Fuente: Elaboración propia con datos de Gapminder Se observa cómo los países que tienen un valor de PIB per cápita inferior a 10.000$ tienen una esperanza de vida muy inferior al resto. 2.3.2 Tabla descriptiva de países # utiliza el comando kable para &quot;resumen&quot; y añade un titulo kable(summary(paises07_2VAR), caption = &quot;Resumen (Fuente: Elaboración propia con datos de Gapminder)&quot;) Taula 2.2: Resumen (Fuente: Elaboración propia con datos de Gapminder) pib_per_capita esperanza_de_vida Min. : 277.6 Min. :39.61 1st Qu.: 1624.8 1st Qu.:57.16 Median : 6124.4 Median :71.94 Mean :11680.1 Mean :67.01 3rd Qu.:18008.8 3rd Qu.:76.41 Max. :49357.2 Max. :82.60 Se observa los principales valores descriptivos del pib per cápita y la esperanza de vida de los países en 2007. Por ejemplo, el país con menor esperanza de vida tiene 39,61 años de esperanza de vida media. En cambio, el país mayor esperanza de vida tiene 82,60 años de esperanza de vida media. Es decir, las personas del segundo país viven, de media, el doble de años. "],["objectesr.html", "Capítol 3 Objetos de R 3.1 Colecciones de objetos 3.2 Filtrado de objetos 3.3 Modificacion objetos 3.4 Información faltante", " Capítol 3 Objetos de R 3.1 Colecciones de objetos 3.1.1 Tipo básicos Numeric Los números, en R, en general se guardan en coma flotante y doble precisión (\"double\"). a &lt;- 3.7 class(a) ## [1] &quot;numeric&quot; typeof(a) ## [1] &quot;double&quot; Todo objeto tiene una clase que se puede consultar con la función class(). Adicionalmente se puede saber el tipo de datos interno con typeof(). La precisión doble es exacta hasta los 16 dígitos. La siguiente expresión debería dar 0, pero no es así. sqrt(2)^2 - 2 ## [1] 4.440892e-16 Integer Para indicar que es un entero, hay que finalizar el número con L mayúscula. Ahorran memoria pero pierden precisión. No es muy habitual su uso en Data Science. a &lt;- 4L class(a) ## [1] &quot;integer&quot; typeof(a) ## [1] &quot;integer&quot; Logical Los tipos lógicos TRUE (o T) y FALSE (o F), son de uso común para filtrar vectores. a &lt;- 3 &gt; 4 a ## [1] FALSE class(a) ## [1] &quot;logical&quot; typeof(a) ## [1] &quot;logical&quot; Se pueden convertir a 1 y 0 (respectivamente) con as.numeric(). b &lt;- as.numeric(a) b ## [1] 0 Character Texto entre comas simple o dobles. a &lt;- &quot;hola&quot; # o con comas simples: &#39;hola&#39; class(a) ## [1] &quot;character&quot; typeof(a) ## [1] &quot;character&quot; Factor Información categórica, por ejemplo, el color de los ojos. Por su naturaleza de conjunto, se explican dentro de la sección de vectores. Fechas y horarios Las fechas y horarios, son una clase compleja. Internamente son de tipo \"double\" con dos clases: \"POSIXct\" \"POSIXt\". a &lt;- Sys.time() a ## [1] &quot;2021-01-04 20:21:00 CET&quot; class(a) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; typeof(a) ## [1] &quot;double&quot; La clase \"POSIXct\" internamente almacena el número de segundos transcurridos entre la fecha y las 12:00 AM del 1 de enero de 1970 (en la zona del Tiempo Universal Coordinado (UTC)). Se puede obtener este valor con unclass(). unclass(a) # muestra el valor interno de a ## [1] 1609788061 La clase Date, almacena sólo la fecha. b &lt;- as.Date(a) b ## [1] &quot;2021-01-04&quot; class(a) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; typeof(a) ## [1] &quot;double&quot; La clase Date contiene el número de días transcurridos des de 1 de enero de 1970. unclass(b) ## [1] 18631 Se ampliará esta clase en el capítulo dedicado al package lubridate. 3.1.2 Vectores Se define mediante la función c(). Adopta el mismo tipo básico que los datos que lo componen. class(c(3.1,9.7)) ## [1] &quot;numeric&quot; class(c(4L, 8L)) ## [1] &quot;integer&quot; class(c(TRUE, FALSE)) ## [1] &quot;logical&quot; class(c(&quot;es&quot;, &quot;un&quot;, &quot;vector&quot;)) ## [1] &quot;character&quot; class(c(Sys.Date(), Sys.Date() + 1, Sys.Date()+2)) ## [1] &quot;Date&quot; Longitud Con length() se obtiene el número de elementos. a &lt;- c(2,4,6) length(a) ## [1] 3 Nombres Los vectores pueden tener atributos. Es de uso común el atributo names. names(a) &lt;- c(&quot;dos&quot;,&quot;cuatro&quot;, &quot;seis&quot;) a ## dos cuatro seis ## 2 4 6 Operaciones aritméticas Operaciones aritméticas con vectores. c(1,2,3) * 2 # multiplicación por escalar ## [1] 2 4 6 c(1,2,3) + c(4,5,6) # suma vectores ## [1] 5 7 9 c(1,2,3) * c(4,5,6) # producto elemento a elemento ## [1] 4 10 18 Operaciones con texto paste(1:3,c(&quot;uno&quot;,&quot;dos&quot;, &quot;tres&quot;), sep=&quot;-&quot;) # junta vectores ## [1] &quot;1-uno&quot; &quot;2-dos&quot; &quot;3-tres&quot; paste(c(&quot;Hola,&quot;,&quot;Mundo!&quot;), collapse = &quot; &quot;) # junta elementos de un vector ## [1] &quot;Hola, Mundo!&quot; substr(&quot;abcdefgh&quot;, 3, 4) # subcadenas ## [1] &quot;cd&quot; Secuencias 3:5 ## [1] 3 4 5 seq(from = 2, to = 6, by = 2) ## [1] 2 4 6 rep(0, times = 3) ## [1] 0 0 0 rep(1:3, each = 2) ## [1] 1 1 2 2 3 3 Factor Son vectores de enteros, donde cada entero tiene asignado una etiqueta. color_ojos &lt;- factor(c(&quot;marron&quot;, &quot;azul&quot;, &quot;azul&quot;, &quot;verde&quot;)) color_ojos ## [1] marron azul azul verde ## Levels: azul marron verde El atributo levels contiene las etiquetas. Se puede consultar con levels(). Por defecto, los levels se crean en orden alfanumérico a partir de los valores del vector. También se pueden definir por parámetro. color_ojos &lt;- factor(c(&quot;marron&quot;, &quot;azul&quot;, &quot;azul&quot;, &quot;verde&quot;), levels = c(&quot;marron&quot;, &quot;azul&quot;, &quot;verde&quot;)) levels(color_ojos) ## [1] &quot;marron&quot; &quot;azul&quot; &quot;verde&quot; Los factores, se codifican internamente como integer. Cada entero, contiene la posición en el vector de levels. Esta forma de codificar, ahorra memoria y acelera los cálculos. Se puede recuperar los valores integer con unclass(). class(color_ojos) ## [1] &quot;factor&quot; typeof(color_ojos) ## [1] &quot;integer&quot; unclass(color_ojos) ## [1] 1 2 2 3 ## attr(,&quot;levels&quot;) ## [1] &quot;marron&quot; &quot;azul&quot; &quot;verde&quot; También se pueden transformar a character con as.character(). as.character(color_ojos) ## [1] &quot;marron&quot; &quot;azul&quot; &quot;azul&quot; &quot;verde&quot; 3.1.3 Matrices Las matrices añaden otra dimensión (fila) a los vectores (columna). a &lt;- matrix(1:6, ncol = 2) a ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 Por defecto se rellenan por columna, pero se puede modificar a rellenado por filas. a &lt;- matrix(1:6, ncol = 2, byrow = TRUE) a ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 ## [3,] 5 6 Dimensión Se puede consultar el número de filas y columnas con dim(), ncol() y nrow(). dim(a) ## [1] 3 2 nrow(a) ## [1] 3 ncol(a) ## [1] 2 Nombres Se puede asignar nombres a las filas y a las columnas. colnames(a) &lt;- paste0(&quot;V&quot;,1:ncol(a)) rownames(a) &lt;- LETTERS[1:(nrow(a))] a ## V1 V2 ## A 1 2 ## B 3 4 ## C 5 6 3.1.3.1 Arrays Se puede generalizar las matrices a más de 2 dimensiones con array(). a &lt;- array(11:18, dim=c(2,2,2)) a ## , , 1 ## ## [,1] [,2] ## [1,] 11 13 ## [2,] 12 14 ## ## , , 2 ## ## [,1] [,2] ## [1,] 15 17 ## [2,] 16 18 3.1.4 Listas Las listas permiten agrupar objetos R con distintos tipos de datos. a &lt;- list(11:13, &quot;R&quot;, matrix(1:4,2,2)) a ## [[1]] ## [1] 11 12 13 ## ## [[2]] ## [1] &quot;R&quot; ## ## [[3]] ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 Nombres Se les puede asignar un nombre a cada elemento. names(a) &lt;- c(&quot;es_num&quot;, &quot;es_char&quot;, &quot;es_matriz&quot;) 3.1.5 Data frames Formalmente son una lista de vectores de la misma longitud. Tienen forma de matriz. a &lt;- data.frame(V1=c(1,2,3), V2=c(&quot;R&quot;,&quot;S&quot;,&quot;T&quot;), V3=c(TRUE, FALSE,TRUE)) class(a) ## [1] &quot;data.frame&quot; typeof(a) ## [1] &quot;list&quot; kable(a) V1 V2 V3 1 R TRUE 2 S FALSE 3 T TRUE Para conocer la estructura del objeto es útil la función str(). str(a) ## &#39;data.frame&#39;: 3 obs. of 3 variables: ## $ V1: num 1 2 3 ## $ V2: chr &quot;R&quot; &quot;S&quot; &quot;T&quot; ## $ V3: logi TRUE FALSE TRUE Se utilizan las mismas reglas que en las matrices para saber la dimensión, nombres de filas y columnas. 3.2 Filtrado de objetos Para filtrar matrices y data frames se utiliza corchetes separados por coma [,]. En el caso de vectores, corchetes simples []. Los datos de paises07 servirán de ejemplo. suppressPackageStartupMessages(library(tidyverse)) library(datos) library(knitr) paises07 &lt;- as.data.frame(paises %&gt;% filter(anio==2007)) class(paises07) ## [1] &quot;data.frame&quot; dim(paises07) ## [1] 142 6 colnames(paises07) ## [1] &quot;pais&quot; &quot;continente&quot; &quot;anio&quot; &quot;esperanza_de_vida&quot; &quot;poblacion&quot; &quot;pib_per_capita&quot; Con head() (respec. tail()), se obtiene las primeras (resp. últimas) 6 filas. kable(head(paises07)) pais continente anio esperanza_de_vida poblacion pib_per_capita Afganistán Asia 2007 43.828 31889923 974.5803 Albania Europa 2007 76.423 3600523 5937.0295 Argelia África 2007 72.301 33333216 6223.3675 Angola África 2007 42.731 12420476 4797.2313 Argentina Américas 2007 75.320 40301927 12779.3796 Australia Oceanía 2007 81.235 20434176 34435.3674 Enteros positivos Se puede indicar las posiciones fila y columna a seleccionar. Por ejemplo, la esperanza de vida de Angola y Australia. paises07[c(4,6),4] ## [1] 42.731 81.235 Para evitar que el resultado pase de data frame a vector, se utiliza el parámetro drop. kable(paises07[c(4,6), 4, drop=FALSE]) esperanza_de_vida 4 42.731 6 81.235 Si no se informa la columna (alternativamente fila), se seleccionan todos sus valores. kable(paises07[c(4,6),]) pais continente anio esperanza_de_vida poblacion pib_per_capita 4 Angola África 2007 42.731 12420476 4797.231 6 Australia Oceanía 2007 81.235 20434176 34435.367 En el caso de vectores, se utiliza un solo corchete. a &lt;- c(5,2,4,7,9) a[c(2,2,1,5)] ## [1] 2 2 5 9 Observa que se pueden repetir posiciones o índices. Tampoco es necesario mantener un orden monótono en los índices. Enteros negativos Selecciona todas las columnas (alternativamente las filas) excepto las posiciones indicadas con valor negativo. kable(head(paises07[,-c(3,5)])) pais continente esperanza_de_vida pib_per_capita Afganistán Asia 43.828 974.5803 Albania Europa 76.423 5937.0295 Argelia África 72.301 6223.3675 Angola África 42.731 4797.2313 Argentina Américas 75.320 12779.3796 Australia Oceanía 81.235 34435.3674 Nombres Se utiliza habitualmente para seleccionar las columnas por su nombre. kable(head(paises07[, c(&quot;pais&quot;,&quot;esperanza_de_vida&quot;)])) pais esperanza_de_vida Afganistán 43.828 Albania 76.423 Argelia 72.301 Angola 42.731 Argentina 75.320 Australia 81.235 Dolares y dobles corchetes En listas y data frames se puede obtener un elemento con $nombre , o bien, con corchetes dobles head(paises07$pib_per_capita) ## [1] 974.5803 5937.0295 6223.3675 4797.2313 12779.3796 34435.3674 head(paises07[[&quot;esperanza_de_vida&quot;]]) ## [1] 43.828 76.423 72.301 42.731 75.320 81.235 Una fuente habitual de error es intentar seleccionar las columnas de un objeto matrix con $nombre o dobles corchetes. Esto produce un error. Valores lógicos Se seleccionan las posiciones con valores TRUE o T y se descartan las posiciones FALSE o F. kable(head(paises07[,c(F, F, F, T, F, T)])) esperanza_de_vida pib_per_capita 43.828 974.5803 76.423 5937.0295 72.301 6223.3675 42.731 4797.2313 75.320 12779.3796 81.235 34435.3674 La forma habitual de seleccionar elementos de una matriz es mediante expresiones lógicas. kable(paises07[paises07$continente==&quot;Oceanía&quot;,]) pais continente anio esperanza_de_vida poblacion pib_per_capita 6 Australia Oceanía 2007 81.235 20434176 34435.37 92 Nueva Zelanda Oceanía 2007 80.204 4115771 25185.01 Para construir estas expresiones, puedes utilizar los siguientes operadores. Operador Ejemplo a &gt; b ¿a mayor que b? a &gt;= b ¿a mayor o igual que b? a &lt; b ¿a menor que b? a &lt;= b ¿a menor o igual que b? a == b ¿a igual a b? a != b ¿a distinto b? a %in% c(b,c,d) ¿a esta en el vector b, c o d? Operadores lógicos: (fuente: elaboración propia) Estos operadores resultan extremadamente útiles en vectores. 1 &gt; c(0, 1, 2) ## [1] TRUE FALSE FALSE c(1, 2, 3) != c(3, 2, 1) ## [1] TRUE FALSE TRUE El operador %in% tiene un funcionamiento un poco distinto. Evalúa cada elemento del objeto situado a su izquierda respecto a todos los elementos del objeto situado a su derecha. c(1, 2, 3, 4) %in% c(3, 4, 5) ## [1] FALSE FALSE TRUE TRUE En operadores booleanos utiliza == en vez del operador =. Este último, hace la misma operación que &lt;- de asignación de valores a objetos. Operaciones booleanas Puedes construir expresiones lógicas complejas utilizando los operadores booleanos habituales: Operador Significado cond1 &amp; cond2 ¿Son las dos condiciones ciertas? cond1 | cond1 ¿Es cierta alguna de las dos condiciones? cond1 xor cond1 ¿Es cierta sólo una de las condiciones? !cond1 ¿Es falsa la condición? any(cond1,cond2,) ¿Es cierta alguna de las condiciones? all(cond1,cond2,) ¿Son ciertas todas las condiciones? Operaciones booleanas (fuente: elaboración propia). Para seleccionar los países asiáticos con esperanza de vida media en 2007 superior o igual a 80 años. consulta &lt;- paises07[paises07$continente==&quot;Asia&quot; &amp; paises07$esperanza_de_vida &gt;= 80 ,] kable(consulta) pais continente anio esperanza_de_vida poblacion pib_per_capita 56 Hong Kong, China Asia 2007 82.208 6980412 39724.98 64 Israel Asia 2007 80.745 6426679 25523.28 67 Japón Asia 2007 82.603 127467972 31656.07 3.3 Modificacion objetos R ofrece algunas facilidades para modificar los valores de sus objetos. Filtro y asignación ]&lt;- Para modificar uno elemento de un vector, R te ofrece la posibilidad de aplicar un filtro con corchetes seguido de una asignación. a &lt;- 1:6 a[1] &lt;- 10 a ## [1] 10 2 3 4 5 6 También puedes modificar varios elementos a la vez asignando un vector de la misma longitud. a[c(3,5)] &lt;- c(300,500) a ## [1] 10 2 300 4 500 6 a[4:6] &lt;- a[4:6] + 1 a ## [1] 10 2 300 5 501 7 Puedes añadir elementos nuevos a un vector. a[7] &lt;- 7 a ## [1] 10 2 300 5 501 7 7 También puedes modificar varios elementos asignando un único valor. a[c(3,5,7)] &lt;- 0 a ## [1] 10 2 0 5 0 7 0 En data frames (y listas) se pueden añadir columnas (resp. elementos). suppressPackageStartupMessages(library(tidyverse)) library(datos) library(knitr) paises07$id &lt;- 1:nrow(paises07) kable(head(paises07)) pais continente anio esperanza_de_vida poblacion pib_per_capita id Afganistán Asia 2007 43.828 31889923 974.5803 1 Albania Europa 2007 76.423 3600523 5937.0295 2 Argelia África 2007 72.301 33333216 6223.3675 3 Angola África 2007 42.731 12420476 4797.2313 4 Argentina Américas 2007 75.320 40301927 12779.3796 5 Australia Oceanía 2007 81.235 20434176 34435.3674 6 Modificar el nombre de una columna. colnames(paises07)[colnames(paises07)==&quot;id&quot;] &lt;- &quot;identificador&quot; colnames(paises07) ## [1] &quot;pais&quot; &quot;continente&quot; &quot;anio&quot; &quot;esperanza_de_vida&quot; &quot;poblacion&quot; &quot;pib_per_capita&quot; ## [7] &quot;identificador&quot; Eliminar las columnas (resp. elmentos) con el objeto NULL. paises07$identificador &lt;- NULL colnames(paises07) ## [1] &quot;pais&quot; &quot;continente&quot; &quot;anio&quot; &quot;esperanza_de_vida&quot; &quot;poblacion&quot; &quot;pib_per_capita&quot; 3.4 Información faltante Para marcar los valores faltantes en R se utiliza la combinación NA (acrónimo de Not Available). Este valor especial tiene su propia aritmética. a &lt;- 3 + c(NA, 4) a ## [1] NA 7 Es decir, cuando un valor es desconocido, la mejor opción es no evaluar la suma con otros valores. Las expresiones lógicas se comportan de un modo similar. c(8, NA) &gt; 0 ## [1] TRUE NA Seleccion filas missings Para seleccionar las filas con valores faltantes, entre otros usos, puedes utilizar la función is.na(). # Introducimos algunos NA para el ejemplo paises07NA &lt;- paises07 paises07NA$pib_per_capita[c(34,70,108)] &lt;- NA kable(summary(paises07NA)) pais continente anio esperanza_de_vida poblacion pib_per_capita Afganistán: 1 África :52 Min. :2007 Min. :39.61 Min. :1.996e+05 Min. : 277.6 Albania : 1 Américas:25 1st Qu.:2007 1st Qu.:57.16 1st Qu.:4.508e+06 1st Qu.: 1708.3 Argelia : 1 Asia :33 Median :2007 Median :71.94 Median :1.052e+07 Median : 6223.4 Angola : 1 Europa :30 Mean :2007 Mean :67.01 Mean :4.402e+07 Mean :11750.2 Argentina : 1 Oceanía : 2 3rd Qu.:2007 3rd Qu.:76.41 3rd Qu.:3.121e+07 3rd Qu.:18008.7 Australia : 1 NA Max. :2007 Max. :82.60 Max. :1.319e+09 Max. :49357.2 (Other) :136 NA NA NA NA NAs :3 Para seleccionar los registros con missing en una columna. kable(paises07NA[is.na(paises07NA$pib_per_capita),]) pais continente anio esperanza_de_vida poblacion pib_per_capita 34 República Checa Europa 2007 76.486 10228744 NA 70 Corea, Rep. Dem. Asia 2007 67.297 23301725 NA 108 Ruanda África 2007 46.242 8860588 NA Filtros missings La presencia de NA en una variable dificulta la definición de condiciones lógicas. Por ejemplo, si seleccionamos países con PIB per cápita inferior a 500 dólares se obtiene el siguiente resultado incorrecto: kable(paises07NA[paises07NA$pib_per_capita&lt;500,]) pais continente anio esperanza_de_vida poblacion pib_per_capita 18 Burundi África 2007 49.580 8390505 430.0707 28 República Democrática del Congo África 2007 46.462 64606759 277.5519 NA NA NA NA NA NA NA NA.1 NA NA NA NA NA NA 75 Liberia África 2007 45.678 3193942 414.5073 NA.2 NA NA NA NA NA NA 142 Zimbabue África 2007 43.487 12311143 469.7093 Esta problemática se puede resolver mediante la función which(). kable(paises07NA[which(paises07NA$pib_per_capita&lt;500),]) pais continente anio esperanza_de_vida poblacion pib_per_capita 18 Burundi África 2007 49.580 8390505 430.0707 28 República Democrática del Congo África 2007 46.462 64606759 277.5519 75 Liberia África 2007 45.678 3193942 414.5073 142 Zimbabue África 2007 43.487 12311143 469.7093 La función which() devuelve la posición de los valores TRUE dentro de un vector. a &lt;- c(NA, FALSE, NA, TRUE, FALSE, TRUE, NA ) which(a) ## [1] 4 6 Utiliza which para protegerte de la presencia de valores faltantes en la definición de filtros. "],["dataio.html", "Capítol 4 Lectura escritura 4.1 Datos de texto 4.2 Otros formatos", " Capítol 4 Lectura escritura A continuación, se presentan las funciones para la lectura/escritura de datos, cruce y construcción de tablas resumen. 4.1 Datos de texto RStudio aporta facilidades para la importación de datos a través del menú: File -&gt; Import Data set -&gt; From Text... No obstante lo más habitual es importar a través de código. Lectura texto con separador Para leer el siguiente fichero de texto: library(knitr) library(pander) library(kableExtra) cat(paste0(readLines(&quot;www/data/mtcars.csv&quot;, n = 6), collapse=&quot;\\n&quot;)) ## &quot;mpg&quot;,&quot;cyl&quot;,&quot;disp&quot;,&quot;hp&quot;,&quot;drat&quot;,&quot;wt&quot;,&quot;qsec&quot;,&quot;vs&quot;,&quot;am&quot;,&quot;gear&quot;,&quot;carb&quot; ## 21,6,160,110,3.9,2.62,16.46,0,1,4,4 ## 21,6,160,110,3.9,2.875,17.02,0,1,4,4 ## 22.8,4,108,93,3.85,2.32,18.61,1,1,4,1 ## 21.4,6,258,110,3.08,3.215,19.44,1,0,3,1 ## 18.7,8,360,175,3.15,3.44,17.02,0,0,3,2 Dado que se trata de un fichero con un carácter separado, la función genérica para teste tipo de ficheros es read.table(). mtcars &lt;- read.table(&quot;www/data/mtcars.csv&quot;, dec=&quot;.&quot;,sep=&quot;,&quot;, header=TRUE) Los parámetros especificados son: dec: El separador decimal. En Europa se acostumbra a utilizar la coma , sep: El separador de columnas. Es habitual usar también ; y \\t cuando es un tabulador. header: Indica si la primera fila contiene el nombre de las variables o no. También es común el uso de fileEncoding=\"Latin1\" cuando el fichero se ha creado con Windows y utiliza caracteres especiales de texto (tildes, ). Dada la estructura del fichero, con read.csv() la carga es más simple. mtcars &lt;- read.csv(&quot;www/data/mtcars.csv&quot;) Cuando el csv es europeo, , decimal y ; como separador, se utiliza read.csv2(). Es una buena práctica verificar su carga con dim(), head() y summary(). dim(mtcars) ## [1] 32 11 kable(head(mtcars)) mpg cyl disp hp drat wt qsec vs am gear carb 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 kable(summary(mtcars)) mpg cyl disp hp drat wt qsec vs am gear carb Min. :10.40 Min. :4.000 Min. : 71.1 Min. : 52.0 Min. :2.760 Min. :1.513 Min. :14.50 Min. :0.0000 Min. :0.0000 Min. :3.000 Min. :1.000 1st Qu.:15.43 1st Qu.:4.000 1st Qu.:120.8 1st Qu.: 96.5 1st Qu.:3.080 1st Qu.:2.581 1st Qu.:16.89 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:3.000 1st Qu.:2.000 Median :19.20 Median :6.000 Median :196.3 Median :123.0 Median :3.695 Median :3.325 Median :17.71 Median :0.0000 Median :0.0000 Median :4.000 Median :2.000 Mean :20.09 Mean :6.188 Mean :230.7 Mean :146.7 Mean :3.597 Mean :3.217 Mean :17.85 Mean :0.4375 Mean :0.4062 Mean :3.688 Mean :2.812 3rd Qu.:22.80 3rd Qu.:8.000 3rd Qu.:326.0 3rd Qu.:180.0 3rd Qu.:3.920 3rd Qu.:3.610 3rd Qu.:18.90 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:4.000 3rd Qu.:4.000 Max. :33.90 Max. :8.000 Max. :472.0 Max. :335.0 Max. :4.930 Max. :5.424 Max. :22.90 Max. :1.0000 Max. :1.0000 Max. :5.000 Max. :8.000 Escritura texto con separador Para la escritura, puedes utilizar sus equivalentes: write.table(), write.csv(), write.csv2(). Cabe destacar algunas pequeñas variaciones. write.csv2(mtcars, file=&quot;www/temp/mtcars2.csv&quot;, row.names=FALSE, na=&quot;&quot;) row.names: Si no se especifica, por defecto, se inserta el número de fila. na: Si no se especifica, introduce el texto NA. Observa como el nuevo csv ahora tiene el formato de csv europeo. cat(paste0(readLines(&quot;www/temp/mtcars2.csv&quot;, n = 6), collapse=&quot;\\n&quot;)) ## &quot;mpg&quot;;&quot;cyl&quot;;&quot;disp&quot;;&quot;hp&quot;;&quot;drat&quot;;&quot;wt&quot;;&quot;qsec&quot;;&quot;vs&quot;;&quot;am&quot;;&quot;gear&quot;;&quot;carb&quot; ## 21;6;160;110;3,9;2,62;16,46;0;1;4;4 ## 21;6;160;110;3,9;2,875;17,02;0;1;4;4 ## 22,8;4;108;93;3,85;2,32;18,61;1;1;4;1 ## 21,4;6;258;110;3,08;3,215;19,44;1;0;3;1 ## 18,7;8;360;175;3,15;3,44;17,02;0;0;3;2 Texto con ancho fijo Veamos un ejemplo de fichero de ancho fijo: cat(paste0(readLines(&quot;www/data/fwf-sample.txt&quot;, n = 6), collapse=&quot;\\n&quot;)) ## John Smith WA 418-Y11-4111 ## Mary Hartford CA 319-Z19-4341 ## Evan Nolan IL 219-532-c301 Para leer texto de ancho fijo, se utiliza read.fwf(). fwf_sample &lt;- read.fwf(&quot;www/data/fwf-sample.txt&quot;, widths=c(20,10,12) , col.names=c(&quot;name&quot;, &quot;state&quot;, &quot;ssn&quot;)) widths: Son los anchos de cada variable. col.names: Nombres de las variables. kable(fwf_sample) name state ssn John Smith WA 418-Y11-4111 Mary Hartford CA 319-Z19-4341 Evan Nolan IL 219-532-c301 4.2 Otros formatos Leer Excel library(readxl) data &lt;- read_excel(&quot;www/data/data.xlsx&quot;) Leer SPSS library(foreign) data&lt;-read.spss(&quot;http://psych.colorado.edu/~carey/Courses/PSYC7291/DataSets/SPSS/crime.sav&quot;, to.data.frame =TRUE, use.value.labels = TRUE) Recuerda que también puedes utilizar load y save para leer y escribir objetos de R. "],["getdata.html", "Capítol 5 Fuentes de datos 5.1 Algunmos orígenes: 5.2 Más origenes 5.3 Crear datos 5.4 Criterios selección", " Capítol 5 Fuentes de datos 5.1 Algunmos orígenes: Algunos orígenes de datos de interés son: Baròmetre del CEO: https://ceo.gencat.cat/ca/barometre/ Institut dEstadística de Catalunya: https://www.idescat.cat/ Resultats electorals (Catalunya): https://eleccions.gencat.cat/ca/resultats-electorals/#/ Resultados electorales (España): http://www.infoelectoral.mir.es/infoelectoral/min/areaDescarga.html?method=inicio Microdatos de INE (Insituto Nacional Estadística): http://www.ine.es/prodyser/microdatos.htm EU Open data portal: https://data.europa.eu/euodp/en/data PISA Data: http://www.oecd.org/pisa/data/ European Social Survey (2018 - SPSS): https://www.europeansocialsurvey.org/data/round-index.html Open Data USA: https://www.data.gov/ USA General Social Survey (2018 - SPSS): https://gss.norc.org/get-the-data/spss package psData: Download Regularly Maintained Political Science Data Sets https://cran.r-project.org/web/packages/psData/index.html package poliscidata: Datasets and Functions Featured in Pollock and Edwards, an R Companion to Essentials of Political Analysis, Second Edition: https://cran.r-project.org/web/packages/poliscidata/index.html package WDI: World Development Indicators and Other World Bank Data: https://cran.r-project.org/web/packages/WDI/index.html package manifestoR: Access and Process Data and Documents of the Manifesto Project 5.2 Más origenes Resulta de gran interès la lectura del Capítulo 5: Get existing (Gahner y Zoltán , 2019). En concreto resulta de especial interès el enlace al siguiente Directorio en Excel de más de 400 orígenes de datos políticos de todo el mundo. Estan categorizados por: tema, pais, fechas, disponibilidad, formato, registro, enlace al diseño Más datos paquetes con datos des de GitHub (instalar previamente paquete remotes): remotes::install_github(\"arcruz0/paqueteadp\"): Datos de apoyo al libro AnalizaR Datos Políticos remotes::install_github(\"jamesmartherus/anesr\"): American National Election Study remotes::install_github(\"xmarquez/vdem\"): Varieties of Democracy into R 5.3 Crear datos Otro camino más complejo es crear tu propia base de datos. Una opción seria el desarrollo de una encuesta. En este sentido Google Forms es una excelente herramienta para realizar encuestas online. Para mas opciones se recomienda la lectura del Capítulo 6: Create data (Gahner y Zoltán , 2019), donde se explicam alguinos pasos en realizar web scraping de datos, parlamentos, Twitter, Google Trends, Wikipedia 5.4 Criterios selección Algunos criterios para seleccionar un conjunto de datos son: Datos de tu interés Que tenga suficientes filas: Si bien no es un criterio preciso, es aconsejable que la base del proyecto tenga un mínimo entre 7 y 10 filas por cada variable del modelo. Por ejemplo, su quieres introducir un mínimo de 5 variables, como mínimo deberias tener 50 filas. Es decir, evita escojer datos de Comunidades autónomos (17) y usa como mínimo datos de provincia (52). Que haya diversidad de tipología de variables: Continuas, categóricas, ordinales Selecciona cual va a ser tu variable dependiente y cuales las independientes. "],["ggplot2graph.html", "Capítol 6 Gráficos con ggplot2 6.1 Estructura básica 6.2 Otros geoms 6.3 Otros elmentos 6.4 Más ejemplos 6.5 Actividad guiada 1.3", " Capítol 6 Gráficos con ggplot2 Un simple gráfico ha brindado más información a la mente del analista de datos que cualquier otro dispositivo. - John Tukey 6.1 Estructura básica ggplot2 es un sistema coherente para hacer gráficos. suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(HistData)) data(Galton) ggplot(data= Galton, mapping = aes(x=parent, y= child)) + geom_point() Figura 6.1: Altura padres e hijos (Galton, 1885) La altura de los padres es la media entre la altura del padre y 1.08 veces la de la madre. En los datos hay 205 padres diferentes y 928 hijos. Los datos fueron tabulados y por lo tanto discretizado. Para visualizar los datos resulta útil introducir aleatoridad con jitter. ggplot(data= Galton, mapping = aes(x=parent, y= child)) + geom_jitter() Figura 6.2: Jitter altura padres e hijos (Galton, 1885) Los componentes mínimos son: ggplot define el conjunto de datos en el parámetro data que debería contener todas las variables del gráfico. geom_&lt;función&gt;: Define el tipo de gráfico. Por ejemplo, geom_point es un gráfico de puntos. mapping: define mapeo de parámetros estéticos (x, y) a través de la función aes(). A diferencia de plot, ggplot permite asignar el gráfico a un objeto R. p1 &lt;- ggplot(Galton, aes(x=parent, y= child)) + geom_jitter() Posteriormente, puedes añadirle otros elementos gráficos. p1 &lt;- p1 + geom_smooth(method=&#39;lm&#39;, se=FALSE, formula = y~x, aes(color = &quot;lm&quot;)) + geom_abline(aes(intercept = 0, slope = 1, color = &quot;Diagonal y = x&quot;)) + labs(title = &quot;Relación altura padres e hijos (Galton, 1885)&quot; ,x = &quot;Media altura padres (pulgadas)&quot;, y = &quot;Altura hijos (pulgadas)&quot;) p1 Figura 6.3: Regresion Simple y recta diagonal altura padres e hijos (Galton, 1885) Si defines el mapeo de estéticos en ggplot ya no es necesario definirlos en los geoms. 6.2 Otros geoms Otros ejemplos de geoms con los datos de países en 2007. library(ggrepel) library(datos) paises07 &lt;- as.data.frame(paises %&gt;% filter(anio==2007)) # paises en 2007 p1 &lt;- ggplot(paises07, aes(x=esperanza_de_vida)) + geom_histogram() p2 &lt;- ggplot(paises07, aes(x=continente, fill=continente)) + geom_bar() p3 &lt;- ggplot(paises07, aes(y=esperanza_de_vida, fill=continente)) + geom_boxplot() p4 &lt;- ggplot(paises07 %&gt;% arrange(desc(esperanza_de_vida)) %&gt;% head(25), aes(x=pib_per_capita, y=esperanza_de_vida)) + geom_point() + geom_label_repel(aes(label=pais), size=3) 6.3 Otros elmentos Otros elementos a tener en cuenta en la presentación: Permite crear un panel de gráficos utilizando variables de segmentación: facet_wrap() y facet_grid() Insertar etiquetas y anotaciones de texto: consulta la función annotate(), geom_text(), geom_label(), geom_label_repel(). Escalas: Permite cambiar los valores de los ejes. Por ejemplo, consulta scale_x_continuous() y scale_x_log10(). Colores: Para cambiar las paletas de colores consulta scale_colour_discrete(), scale_colour_brewer(), scale_colour_manual(), scale_fill_viridis(), scale_colour_gradient() Zoom: Importante, para realizar zoom utiliza xlim e ylim en: coord_cartesian(). Temas: Personaliza posición de la leyenda y resto de elementos gráficos, tamaños colores, fuente Consulta: theme() y theme_bw(). Interactivos: packages gganimate y plotly. Para ampliar la lectura consulta: R for Data Science from Garrett Grolemund and Hadley Wickham. ggplot2: Elegant Graphics for Data Analysis de Hadley Wickham. ggplot2 extensions guide lista los paquetes que extienden ggplot2. La {ggplot2} cheat sheet. 6.4 Más ejemplos Panel de datos facet_wrap() p00 &lt;- ggplot(paises , aes(x=pib_per_capita , y=esperanza_de_vida , color=continente , size=poblacion , label=pais))+ geom_point() + scale_x_log10() + facet_wrap(~anio)+ labs(title=&quot;Paises en 2007&quot;) p00 Figura 6.4: Más facet_wrap() y facet_grid() Etiquetas geom_label() p07 &lt;- ggplot(paises07 , aes(x=pib_per_capita , y=esperanza_de_vida , color=continente , size=poblacion))+ geom_point() + scale_x_log10() + labs(title=&quot;Paises en 2007&quot;)+ geom_label(data=paises07 %&gt;% filter(pais==&quot;China&quot;) , nudge_y=2 , aes(label=pais) , size=4 , color=&quot;black&quot;) p07 Figura 6.5: Más geom_label() Paleta colores scale_colour_brewer() p07 &lt;- p07 + scale_colour_brewer( palette = &quot;Dark2&quot;) p07 Figura 6.6: Más paletas COLORBREWER Zoom coord_cartesian() p07 &lt;- p07 + coord_cartesian( xlim=c(300,5000) , ylim=c(38,45)) p07 Figura 6.7: Más coord_cartesian() Temas theme_bw() p07 &lt;- p07 + theme_bw() p07 Figura 6.8: Más en ggtheme Gráficos interactivos ggplotly() suppressPackageStartupMessages( library(plotly)) ggplotly(p00) Figura 6.9: Más R Plotly Mueve el raton por encima del gráfico para identificar los países. Des de la leyenda puedes filtrar los continentes que se quieren mostrar. Actividad guiada 1.3. Vamos a mejorar de nuevo el informe de los países introduciendo: Haz un panel de boxplot por año del PIB per cápita (escala log10) y la esperanza de vida. Mejora el gráfico de dispersión de países: Recodifica Oceanía como Asia y Modifica los colores de los continentes. Utiliza los siguiente paleta de colores: blue: África green: Américas red: Asia yellow: Europa Inserta Etiquetas para España, China, Etiopía y Canadá. Observa: Se han añadido parámetros estéticos: color y size. La escala del eje x (pib_per_capita) se ha transformado a escala logarítmica con scale_x_log10(). Se ha definido un panel temporal con facet_wrap() Hay que imprimir el gráfico con print() Se ha recodificado una variable factor. Se ha parametrizado los colores de los continentes y las etiquetas de los países. La función describir() devuelve una lista de resultados (plots y tablas). Se han introducido boxplots. Se ha construido un data frame con los países con etiqueta. Se ha seleccionado las variables a presentar en el summary. Puedes ver la solución en 6.5 . Hans Rosling de Gapminder utilizó un gráfico muy parecido a éste, añadiendo un quinto eje (el tiempo) en una famosa conferencia TED Talk (14,6M de visualizaciones). Dedícale 1 minuto a ver la simulación dándole al botón de play (abajo izquierda), en el siguiente enlace. La herramienta utilizada Trendalyzer fue posteriormente adquirida por Google. 6.5 Actividad guiada 1.3 --- title: &quot;Actividad 1.3&quot; output: html_document --- library(knitr) library(datos) suppressPackageStartupMessages(library(tidyverse)) knitr::opts_chunk$set(echo = TRUE) Gráfico de dispersión de países p1 &lt;- ggplot(paises, aes(x=pib_per_capita, y=esperanza_de_vida , color=continente, size=poblacion)) + geom_point() + scale_x_log10() + labs(title=&quot;Panel de países del 1952 al 2007&quot; , x = &quot;Logaritmo base 10 del PIB per cápita ($ americanos, ajustados según inflación)&quot; , y = &quot;Esperanza de vida (años)&quot;) + facet_wrap(~anio) print(p1) Figura 6.10: Panel países (Fuente: Elaboración propia con datos de Gapminder) Se observa una clara relación entre tener un mayor PIB per cápita (logaritmo base 10) y la esperanza de vida media de los países. Se observa como África ha tenido históricamente menor PIB y menor esperanza de vida. Se observa Asia y América en su conjunto, han aumentado en PIB y esperanza de vida. 6.5.1 Preparación de datos library(ggrepel) paises_informe &lt;- paises # Recodifica Oceanía por Asia paises_informe$continente[paises_informe$continente==&quot;Oceanía&quot;] &lt;- &quot;Asia&quot; # Elimina Oceanía de los levels paises_informe$continente &lt;- factor(paises_informe$continente) # Paleta de colores colores_continente &lt;- c(&quot;blue&quot;,&quot;green&quot;, &quot;red&quot;, &quot;yellow&quot;) names(colores_continente) &lt;- c(&quot;África&quot;, &quot;Américas&quot;, &quot;Asia&quot;, &quot;Europa&quot;) # Etiquetas etiquetas_paises &lt;- c(&quot;España&quot;,&quot;China&quot;,&quot;Etiopía&quot;,&quot;Canadá&quot;) # funcion describir describir &lt;- function(data, colores, etiquetas) { # filtra paises con etiqueta data_etiquetas &lt;- data[data$pais %in% etiquetas, ] resultados &lt;- list() resultados[[&quot;pib_per_capita&quot;]] &lt;- ggplot(data, aes(x=anio, y=pib_per_capita, group=anio)) + geom_boxplot()+ scale_y_log10() resultados[[&quot;esperanza_de_vida&quot;]] &lt;- ggplot(data, aes(x=anio, y=esperanza_de_vida, group=anio)) + geom_boxplot() resultados[[&quot;dispersion&quot;]] &lt;- ggplot(data, aes(x=pib_per_capita, y=esperanza_de_vida , color=continente, size=poblacion)) + geom_point() + scale_x_log10() + scale_colour_manual(values = colores) + geom_label(data=data_etiquetas , mapping=aes(x=pib_per_capita, y=esperanza_de_vida, label=pais) , size=3, color=&quot;black&quot;) + labs(title=&quot;Panel de países del 1952 al 2007&quot; , x = &quot;Logaritmo base 10 del PIB per cápita ($ americanos, ajustados según inflación)&quot; , y = &quot;Esperanza de vida (años)&quot;) + facet_wrap(~anio) resultados[[&quot;summary&quot;]] &lt;- summary(data[,c(&quot;anio&quot;,&quot;continente&quot;,&quot;esperanza_de_vida&quot;,&quot;pib_per_capita&quot;)]) return(resultados) } resumen &lt;- describir(paises_informe, colores_continente, etiquetas_paises) 6.5.2 Descriptivo boxplot Figura 6.11: Boxplot PIB per càpita (Continente y año) - Escala Log10 Se observa como los valores del boxplot aumentan, es decir, el PIB cada vez es mayor. Aunque parece que el tamaño de las cajas (difernecia entre 1r y 3r cuantil), cada vez son mas anchas. Figura 6.12: Boxplot Esperanza de vida (Continente y año) A su vez, la esperanza de vida también aumenta. El eje central de la caja (la mediana) cada vez se sitúa más en al parte superior de la caja (cerca del 3r cuantil). 6.5.3 Gráfico de dispersión de países Figura 6.13: Panel países (Fuente: Elaboración propia con datos de Gapminder) Vemos como España y Canadá siempre han estado en la parte superior y Etiopía en la parte inferior en PIB per cápita y esperanza de vida. En cambio, China ha evolucionado positivamente en estos dos aspectos, pasando de la parte inferior a la parte superior de la nube de países. "],["datacross.html", "Capítol 7 Cruces entre tablas 7.1 Ordenación y Union 7.2 Cruce por campos clave", " Capítol 7 Cruces entre tablas 7.1 Ordenación y Union Ordenación Para ordenar un vector se utiliza la función sort(). a &lt;- c(5,2,9,4) sort(a) ## [1] 2 4 5 9 Lo mismo se puede hacer en dos pasos. Primero, con order() se obtienen los índices de ordenación. indices_ordenacion &lt;- order(a) indices_ordenacion ## [1] 2 4 1 3 Segundo se seleccionan los elementos del vector a en ese orden. a[indices_ordenacion] ## [1] 2 4 5 9 Observa que el resultado es idéntico a utilizar directamente sort(). Mismo principio ahora, para ordenar la tabla paises07 por continente (decreciente) y esperanza de vida (creciente). library(datos) library(ggrepel) suppressPackageStartupMessages(library(tidyverse)) paises07 &lt;- as.data.frame(paises %&gt;% filter(anio==2007)) paises07Ord &lt;- paises07[order(paises07$continente,paises07$esperanza_de_vida ,decreasing = c(T,F)),] kable(head(paises07Ord)) pais continente anio esperanza_de_vida poblacion pib_per_capita 92 Nueva Zelanda Oceanía 2007 80.204 4115771 25185.009 6 Australia Oceanía 2007 81.235 20434176 34435.367 132 Turquía Europa 2007 71.777 71158647 8458.276 107 Rumania Europa 2007 72.476 22276056 10808.476 16 Bulgaria Europa 2007 73.005 7322858 10680.793 57 Hungría Europa 2007 73.338 9956108 18008.944 Unión por columnas Para unir las columnas de 2 tablas que comparten ordenación de sus filas se utiliza cbind(). a1 &lt;- paises07[,1:2] a2 &lt;- paises07[,4:5] a &lt;- cbind(a1, a2) kable(head(a)) pais continente esperanza_de_vida poblacion Afganistán Asia 43.828 31889923 Albania Europa 76.423 3600523 Argelia África 72.301 33333216 Angola África 42.731 12420476 Argentina Américas 75.320 40301927 Australia Oceanía 81.235 20434176 Unión por filas Unir las filas de dos tablas con la misma ordenación de sus columnas rbind(). a1 &lt;- paises07[1:2,] a2 &lt;- paises07[4:5,] a &lt;- rbind(a1, a2) kable(head(a)) pais continente anio esperanza_de_vida poblacion pib_per_capita 1 Afganistán Asia 2007 43.828 31889923 974.5803 2 Albania Europa 2007 76.423 3600523 5937.0295 4 Angola África 2007 42.731 12420476 4797.2313 5 Argentina Américas 2007 75.320 40301927 12779.3796 7.2 Cruce por campos clave Un campo clave consiste en una variable que identifica cada registro de forma única. Por ejemplo, pais y continente son campos clave ya que identifican de forma única a sus respectivas entidades en la tabla de paises. Antes de realizar cualquier cruce por campos clave, es importante saber si éste tiene o no duplicados. Unicidad Para obtener las claves únicas de un vector utiliza unique(). sort(unique(as.character(paises07$continente))) ## [1] &quot;África&quot; &quot;Américas&quot; &quot;Asia&quot; &quot;Europa&quot; &quot;Oceanía&quot; Para saber qué filas de un data frame están duplicadas, utiliza duplicated(). paisesDup &lt;- paises07[c(1,1,2,3,3,4,5,5,6),] any(duplicated(paisesDup)) # ¿Tiene duplicados? ## [1] TRUE as.character(paisesDup$pais[duplicated(paisesDup)]) # que países son ## [1] &quot;Afganistán&quot; &quot;Argelia&quot; &quot;Argentina&quot; Fusión con claves Para cruzar 2 tablas con claves, utiliza merge(). Inner join Analiza el siguiente ejemplo: a1 &lt;- data.frame(ID = c(1,2,3), X1 = c(1,1,2), X2 = c(&quot;b&quot;,&quot;a&quot;,&quot;a&quot;)) a2 &lt;- data.frame(ID = c(2,3,3,4), X1 = c(1,1,2,2), X3 = c(FALSE, TRUE, FALSE, FALSE)) a_inner &lt;- merge(a1, a2) kable(a_inner) ID X1 X2 X3 2 1 a FALSE 3 2 a FALSE R, ha seleccionado ID y X1 como campos clave porque son las variables con nombres coincidentes en ambas tablas. Veremos cómo modificar esto. Otra decisión que R ha tomado, es que sólo ha recuperado los registros con valores de ID y X1 compartidos en ambas tablas. Este comportamiento en el lenguaje SQL, es conocido como INNER JOIN. Full join Para conservar todos los registros de las tablas originales, tanto de la tabla izquierda como derecha, coincida o no, se utiliza el parámetro all=TRUE. a_full &lt;- merge(a1, a2, all = TRUE) kable(a_full) ID X1 X2 X3 1 1 b NA 2 1 a FALSE 3 1 NA TRUE 3 2 a FALSE 4 2 NA FALSE Observa ahora, no ha descartado ningún registro de las tablas origen. Además, ha rellenado con NA los campos que no cruzan. Este comportamiento en SQL es conocido como FULL JOIN . Left join Para imponer que conserve todos los valores origen de la tabla izquierda (a1) y que descarte los de la taba derecha que no sean compartidos utiliza all.x=TRUE. a_left &lt;- merge(a1, a2, all.x = TRUE) kable(a_left) ID X1 X2 X3 1 1 b NA 2 1 a FALSE 3 2 a FALSE Vemos que ID=1 ahora está presente y ID=4 ha quedado descartado. También que ID=3 sólo aparece una vez. Este comportamiento en SQL, es conocido como LEFT JOIN . Right join Para preservar todos los valores de la tabla derecha utiliza all.y=TRUE. Este comportamiento en SQL es el conocido como RIGHT JOIN. a_right &lt;- merge(a1, a2, all.y = TRUE) kable(a_right) ID X1 X2 X3 2 1 a FALSE 3 1 NA TRUE 3 2 a FALSE 4 2 NA FALSE Ahora ID=3 aparece 2 veces. También aparece ID=4. Definción de las claves Para definir las claves del cruce, es necesario pasar como parámetro los nombre de las variables: Cuando los nombres de los campos clave son compartidos en ambas tablas, utiliza by. Cuando hay cambios de nombre, utiliza by.x y by.y El siguiente ejemplo, realiza un FULL JOIN definiendo como clave la variable ID. a_comparte &lt;- merge(a1, a2, all.x=TRUE, by = c(&quot;ID&quot;)) # de forma equivalente a_comparte &lt;- merge(a1, a2, all.x=TRUE, by.x = c(&quot;ID&quot;), by.y = c(&quot;ID&quot;)) kable(a_comparte) ID X1.x X2 X1.y X3 1 1 b NA NA 2 1 a 1 FALSE 3 2 a 1 TRUE 3 2 a 2 FALSE R ha añadido el sufijo .x y .y a X1, porque es una variable compartida que ahora no es clave para el cruce. Observa también que ID=3 aparece 2 veces ya que está duplicado en la tabla a2. "],["resumagg.html", "Capítol 8 Resumenes de agregados 8.1 Summary 8.2 Tablas de frecuencias 8.3 Agregados por subgrupos 8.4 La familia apply", " Capítol 8 Resumenes de agregados R tiene muchas opciones para construir agregados. 8.1 Summary Para tener una primera impresión sobre los datos utiliza summary(). paises07Summ &lt;- paises07 paises07Summ$pais &lt;- as.character(paises07Summ$pais) paises07Summ$fecha &lt;- as.Date(paste(paises07Summ$anio,&quot;12&quot;,&quot;31&quot;,sep=&quot;-&quot;),&quot;%Y-%m-%d&quot;) paises07Summ$es_grande &lt;- paises07Summ$poblacion &gt; 30*10^6 paises07Summ$pib_per_capita[c(34,70,108)] &lt;- NA kable(summary(paises07Summ[,c(&quot;pais&quot;,&quot;continente&quot;,&quot;pib_per_capita&quot;,&quot;es_grande&quot;,&quot;fecha&quot;),])) pais continente pib_per_capita es_grande fecha Length:142 África :52 Min. : 277.6 Mode :logical Min. :2007-12-31 Class :character Américas:25 1st Qu.: 1708.3 FALSE:106 1st Qu.:2007-12-31 Mode :character Asia :33 Median : 6223.4 TRUE :36 Median :2007-12-31 NA Europa :30 Mean :11750.2 NA Mean :2007-12-31 NA Oceanía : 2 3rd Qu.:18008.7 NA 3rd Qu.:2007-12-31 NA NA Max. :49357.2 NA Max. :2007-12-31 NA NA NAs :3 NA NA summary en factor y logic devuelve una tabla de frecuencias, en cambio en character no. En numericy Date devuelve 6 estadísticos básicos de resumen más el conteo de NAs. 8.1.1 Estadísticos basicos Los 6 estadísticos básicos del summary son: min(paises07Summ$pib_per_capita, na.rm=TRUE) ## [1] 277.5519 quantile(paises07Summ$pib_per_capita, 0.25, na.rm=TRUE) ## 25% ## 1708.268 median(paises07Summ$pib_per_capita, na.rm=TRUE) ## [1] 6223.367 mean(paises07Summ$pib_per_capita, na.rm=TRUE) ## [1] 11750.22 quantile(paises07Summ$pib_per_capita, 0.75, na.rm=TRUE) ## 75% ## 18008.73 max(paises07Summ$pib_per_capita, na.rm=TRUE) ## [1] 49357.19 El parámetro na.rm=TRUE evita que las funciones resumen, devuelvan un NA debido a la presencia de NA s en la variable pib_por_capita. Observa como esto sucede en la siguiente función. mean(paises07Summ$pib_per_capita) ## [1] NA La función quantile(), por sí sola, puede calcular todos los valores, excepto la media. kable(quantile(paises07Summ$pib_per_capita, seq(0,1,1/4), na.rm=TRUE)) x 0% 277.5519 25% 1708.2679 50% 6223.3675 75% 18008.7268 100% 49357.1902 8.2 Tablas de frecuencias Para obtener una tabla de frecuencias, utiliza table(). Para una variable. kable(table(paises07Summ$continente)) # una variable Var1 Freq África 52 Américas 25 Asia 33 Europa 30 Oceanía 2 Tablas cruzadas de dos o más variables. kable(table(paises07Summ$continente,paises07Summ$es_grande)) FALSE TRUE África 42 10 Américas 19 6 Asia 20 13 Europa 23 7 Oceanía 2 0 Asia es el continente con mayor número de países grandes (de más de 30M de hab.). En muchas ocasiones, es útil tramar las variables numéricas en intervalos. En R utiliza cut(). Vamos a crear la variable nivel de riqueza a partir del pib_per_capita cortando la variable por 1700$ y 18000$. paises07Summ$nivel_de_riqueza &lt;- cut(paises07Summ$pib_per_capita, breaks=c(-Inf,1700,18000,Inf)) kable(head(paises07Summ[,c(&quot;pais&quot;,&quot;pib_per_capita&quot;,&quot;nivel_de_riqueza&quot;)])) Para definir los breaks, R permite utilizar -Inf e Inf (infinito) como si fueran números. cut() crea un factor ordenado a partir de la variable numeric con los siguientes levels: levels(paises07Summ$nivel_de_riqueza) ## [1] &quot;(-Inf,1.7e+03]&quot; &quot;(1.7e+03,1.8e+04]&quot; &quot;(1.8e+04, Inf]&quot; Para modificar las etiquetas utiliza la misma función levels(). levels(paises07Summ$nivel_de_riqueza) &lt;- c(&quot;Pobres&quot;,&quot;Medios&quot;,&quot;Ricos&quot;) Mostramos a continuación la distribución de países ricos y pobres por continente en 2007. kable(table(paises07Summ$continente, paises07Summ$nivel_de_riqueza, useNA = &quot;ifany&quot;)) Pobres Medios Ricos NA África 29 22 0 1 Américas 1 20 4 0 Asia 4 18 10 1 Europa 0 9 20 1 Oceanía 0 0 2 0 Gráficamente. ggplot(paises07Summ) + geom_bar(aes(x=continente, fill=nivel_de_riqueza), position = &quot;fill&quot;) + labs(y=&quot;%&quot;) Para calcular la tabla de porcentajes que se observan en el gráfico se utiliza prop.table(., margin = ?), dónde ? vale 1 para obtener el % fila y 2 para el % columna. Para incluir la suma marginal por filas se utiliza addmargins(.,margin = ?), dónde ? vale 1 para incluir el total suma marginal fila y 2 para el total columna. tabla1 &lt;- table(paises07Summ$continente, paises07Summ$nivel_de_riqueza, useNA = &quot;ifany&quot;) tabla1 &lt;- addmargins(tabla1, margin = 1) # total marginal columna (antes que el %) tabla1 &lt;- 100 * prop.table(tabla1, margin = 1) # porcentaje fila tabla1 &lt;- addmargins(tabla1, margin = 2) # total marginal fila kable(tabla1,digits = 1) Pobres Medios Ricos NA Sum África 55.8 42.3 0.0 1.9 100 Américas 4.0 80.0 16.0 0.0 100 Asia 12.1 54.5 30.3 3.0 100 Europa 0.0 30.0 66.7 3.3 100 Oceanía 0.0 0.0 100.0 0.0 100 Sum 23.9 48.6 25.4 2.1 100 Observa que para definir el nivel de riqueza de los países en 2007 se ha realizado la siguiente transformación: paises07$nivel_de_riqueza &lt;- cut(paises07$pib_per_capita, breaks=c(-Inf,1700,18000,Inf)) levels(paises07$nivel_de_riqueza) &lt;- c(&quot;Pobres&quot;,&quot;Medios&quot;,&quot;Ricos&quot;) 8.3 Agregados por subgrupos Además de frecuencias, es necesario saber calcular otros estadísticos básicos para subgrupo de un data frame. Por ejemplo, la media de esperanza de vida y del pib per cápita, así como, el total de población por continente y nivel de riqueza. agg1 &lt;- aggregate(paises07[,c(&quot;esperanza_de_vida&quot;,&quot;pib_per_capita&quot;)], list(continente = paises07$continente , nivel_de_riqueza=paises07$nivel_de_riqueza),mean) agg2 &lt;- aggregate(paises07[,c(&quot;poblacion&quot;),drop=FALSE], list(continente = paises07$continente , nivel_de_riqueza=paises07$nivel_de_riqueza),sum) &lt;recuerda&gt;aggregate() permite calcular un mismo estadístico sobre varias variables segmentando por más de un eje.&lt;/recuerda&gt; Se juntan ahora los dos agregados con merge() y se genera la variable combinada continente_riqueza. agg3 &lt;- merge(agg1,agg2) agg3$continente_riqueza &lt;- paste(agg3$continente,agg3$nivel_de_riqueza,sep=&quot;-&quot;) kable(agg3) continente nivel_de_riqueza esperanza_de_vida pib_per_capita poblacion continente_riqueza África Medios 59.06305 6014.4232 454062366 África-Medios África Pobres 51.68423 943.7462 475477326 África-Pobres Américas Medios 73.59135 7863.3024 550839183 Américas-Medios Américas Pobres 60.91600 1201.6372 8502814 Américas-Pobres Américas Ricos 76.86500 29152.0266 339529187 Américas-Ricos Asia Medios 69.37822 4912.6469 3277982847 Asia-Medios Asia Pobres 60.20820 1198.8519 282303757 Asia-Pobres Asia Ricos 78.41910 31718.7983 251667223 Asia-Ricos Europa Medios 74.26544 10264.4946 162756836 Europa-Medios Europa Ricos 79.09852 31393.0475 423341693 Europa-Ricos Oceanía Ricos 80.71950 29810.1883 24549947 Oceanía-Ricos El mismo gráfico visto para países, ahora, agregado a nivel de continente y riqueza. ggplot(agg3, aes(x=pib_per_capita , y=esperanza_de_vida , label=continente_riqueza , color =continente , size=poblacion)) + geom_point() + geom_label_repel(size=3, force=10) + scale_x_log10() + labs(title=&quot;Continentes-riqueza en 2007 (no ponderado)&quot;) Figura 8.1: Contienentes (Fuente: Elaboración propia, datos de Gapminder) 8.4 La familia apply Como se ha comentado, las funciones apply permiten vectorizar las operaciones de forma eficiente, sin utilizar bucles for(). tapply Es una alternativa a aggregate() para aplicar una función de agregación sobre una única variable y segmentando por un único eje. tapply(paises07$esperanza_de_vida,paises07$continente,quantile,probs=0.25) ## África Américas Asia Europa Oceanía ## 47.83400 71.75200 65.48300 75.02975 80.46175 lapply Permite aplicar una función sobre cada elemento de un vector o lista. Devuelve una lista. lapply(paises07[,-1], function(x) summary(x)) ## $continente ## África Américas Asia Europa Oceanía ## 52 25 33 30 2 ## ## $anio ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 2007 2007 2007 2007 2007 2007 ## ## $esperanza_de_vida ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 39.61 57.16 71.94 67.01 76.41 82.60 ## ## $poblacion ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.996e+05 4.508e+06 1.052e+07 4.402e+07 3.121e+07 1.319e+09 ## ## $pib_per_capita ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 277.6 1624.8 6124.4 11680.1 18008.8 49357.2 ## ## $nivel_de_riqueza ## Pobres Medios Ricos ## 36 69 37 sapply Misma funcionalidad que lapply, pero simplificando el resultado a vector cuando es posible. sapply(paises07, function(x) class(x)) ## pais continente anio esperanza_de_vida poblacion pib_per_capita ## &quot;factor&quot; &quot;factor&quot; &quot;integer&quot; &quot;numeric&quot; &quot;integer&quot; &quot;numeric&quot; ## nivel_de_riqueza ## &quot;factor&quot; apply Calcula agregados sobre cada una de los vectores marginas fila (MARGIN = 1), alternativamente columna (MARGIN = 2) de una matriz. a &lt;- matrix(1:10,ncol=2) apply(a,MARGIN = 1,sum) ## [1] 7 9 11 13 15 Columnas, a &lt;- matrix(1:10,ncol=2) apply(a,2,sum) ## [1] 15 40 "],["tydiverse.html", "Capítol 9 Alternativas Tydiverse 9.1 Dplyr: arrange, filter, select 9.2 Dplyr: mutate, group_by, summarise 9.3 Actividad guiada 1.4. 9.4 Actividad guiada 1.4", " Capítol 9 Alternativas Tydiverse El universo de Tydiverse consiste en una colección de packages de R orientados al Data Science. Se recomienda la consulta del libro online R para Ciencia de Datos. El package dplyr, al igual que ggplot2, está desarrollado por Hadley Wickham. Este paquete, supone un cambio de filosofía en la forma de trabajar con los datos y se está transformando en un nuevo estándar en R. 9.1 Dplyr: arrange, filter, select arange: Ordena los registros de un data frame. filter: Filtra a partir de un conjunto condiciones lógicas. select: Selecciona las variables. Paises asiaticos con PIB per cápita inferior a 1000 $ en 2007. pais07dplyr &lt;- paises07 %&gt;% arrange(desc(esperanza_de_vida)) %&gt;% filter(continente==&#39;Asia&#39; &amp; pib_per_capita &lt; 1000) %&gt;% dplyr::select(pais,esperanza_de_vida,pib_per_capita) kable(pais07dplyr) pais esperanza_de_vida pib_per_capita Myanmar 62.069 944.0000 Afganistán 43.828 974.5803 Las 3 comparten el hecho que no necesitan de comillas para referirse a las variables. También utilizan el operador %&gt;% llamado pipe. Éste sustituye el parámetro de entrada de datos. De esta forma, permite escribir las operaciones de izquierda a derecha facilitando así su lectura. 9.2 Dplyr: mutate, group_by, summarise mutate: Crea o modifica las variables del data frame. group_by: Especifica una o varias variables de agrupación. summarise: define los agregados de las variables originales. Esperanza de vida y PIB per cápita medio por continente y año. continentes_anio &lt;- paises %&gt;% arrange(continente,anio) %&gt;% mutate(esperanza_de_vida_total = esperanza_de_vida * poblacion , pib_total = pib_per_capita * poblacion) %&gt;% group_by(continente,anio) %&gt;% dplyr::summarize(n_paises=n() , esperanza_de_vida = sum(esperanza_de_vida_total ) / sum(poblacion ) , pib_per_capita = sum(pib_total) / sum(poblacion) , poblacion = sum(poblacion)) kable(continentes_anio %&gt;% head(10)) continente anio n_paises esperanza_de_vida pib_per_capita poblacion África 1952 52 38.79973 1311.221 237640501 África 1957 52 40.94031 1444.952 264837738 África 1962 52 43.09925 1540.599 296516865 África 1967 52 45.17721 1774.847 335289489 África 1972 52 47.21229 2063.171 379879541 África 1977 52 49.20883 2244.799 433061021 África 1982 52 51.01744 2295.192 499348587 África 1987 52 52.82479 2180.764 574834110 África 1992 52 53.37292 2071.615 659081517 África 1997 52 53.28327 2098.865 743832984 Para la evolución de los continentes en ggplot2, es útil el geom_path() ggplot(continentes_anio, aes(x=pib_per_capita , y=esperanza_de_vida , color =continente)) + geom_path() + scale_x_log10() + geom_text_repel(aes(label=anio), size=2, color=&quot;black&quot;) + labs(title=&quot;Evolución continentes (ponderado)&quot;) Figura 9.1: Fuente: Elaboración propia con datos de Gapminder 9.3 Actividad guiada 1.4. Vamos a incorporar los gráficos de evolución de los continentes en el informe teniendo en cuenta los siguientes cambios: Recodifica Oceanía como Asia y Modifica los colores de los continentes. Utiliza la paleta de colores de la actividad guiada 1.3. Observa: Se ha utilizado dplyr: arrange,mutate,group_by y summarize. Se ha utilizado geom_path. 9.4 Actividad guiada 1.4 library(knitr) library(datos) suppressPackageStartupMessages(library(tidyverse)) library(ggrepel) knitr::opts_chunk$set(echo = TRUE) paises_informe &lt;- paises # Recodifica Oceanía por Asia paises_informe$continente[paises_informe$continente==&quot;Oceanía&quot;] &lt;- &quot;Asia&quot; # Elimina Oceanía de los levels paises_informe$continente &lt;- factor(paises_informe$continente) # Paleta de colores colores_continente &lt;- c(&quot;blue&quot;,&quot;green&quot;, &quot;red&quot;, &quot;yellow&quot;) names(colores_continente) &lt;- c(&quot;África&quot;, &quot;Américas&quot;, &quot;Asia&quot;, &quot;Europa&quot;) # Etiquetas etiquetas_paises &lt;- c(&quot;España&quot;,&quot;China&quot;,&quot;Etiopía&quot;,&quot;Canadá&quot;) # funcion describir describir &lt;- function(data, colores, etiquetas) { # filtra paises con etiqueta data_etiquetas &lt;- data[data$pais %in% etiquetas, ] # Agrega continentes data_continente &lt;- data %&gt;% arrange(continente, anio) %&gt;% mutate(esperanza_de_vida_total = esperanza_de_vida * poblacion , pib_total = pib_per_capita * poblacion) %&gt;% group_by(continente, anio) %&gt;% dplyr::summarize(n_paises=n() , esperanza_de_vida = sum(esperanza_de_vida_total ) / sum(poblacion ) , pib_per_capita = sum(pib_total) / sum(poblacion) , poblacion = sum(poblacion)) resultados &lt;- list() resultados[[&quot;continentes&quot;]] &lt;- ggplot(data_continente, aes(x=pib_per_capita, y=esperanza_de_vida , color=continente)) + geom_path() + scale_x_log10() + scale_colour_manual(values = colores) + geom_text_repel(aes(label=anio), size=2, color=&quot;black&quot;) + labs(title=&quot;Evolución de los Continentes de 1952 a 2007&quot; , x = &quot;Logaritmo base 10 del PIB per cápita ($ americanos, ajustados según inflación)&quot; , y = &quot;Esperanza de vida (años)&quot;) return(resultados) } resumen &lt;- describir(paises_informe, colores_continente, etiquetas_paises) ## `summarise()` regrouping output by &#39;continente&#39; (override with `.groups` argument) 9.4.1 Evolución de los continentes Figura 9.2: Evolución continentes (Fuente: Elaboración propia con datos de Gapminder) El gráfico muestra la traza que han recorrido los continentes en sus valores medios de PIB per cápita y Esperanza de vida. Se confirma la mayor progresión de Asia. Vemos que como América y Europa, en media tienen un comportamiento bastante paralelo. Se observa como el recorrido de África, aunque partiendo de valores muy inferiores, ha sido positiva y ha incrementado de forma similar el resto de continentes. "],["lineal.html", "Capítol 10 Regressió lineal", " Capítol 10 Regressió lineal Model de regressió simple i múltiple Equació del model de regressió Hipótesis estadístiques del model Ajust i diagnostic del model Gràfics de regressió parcial Problemes de no-linealitat Transformació de les variables Heteroscedasticitat Multicol·linealitat Residus i dades influents "],["logistica.html", "Capítol 11 Regressió logística", " Capítol 11 Regressió logística Regressió amb variable dependent dicotòmica Formulació del model de regressió logística Estimación de màxima versemblança del model Diagnosis i ajust del model Gràfics defectes parcials Discussió del output de regressió logística "],["acp.html", "Capítol 12 Componentes principales", " Capítol 12 Componentes principales Reducció de la dimensión o anàlisi de components principals i factorial: Problema de la reducción de la dimensión Components principals Matriu de les components Bondat de la representaciò Gràfic dels individus Gràfic de les variables Biplot Rotación dels factors Temes de lanàlisi factorial "],["cluster.html", "Capítol 13 Clustering 13.1 Cluster jerarquic 13.2 Cluster no jerarquic", " Capítol 13 Clustering Classificació i anàlisi dagrupaments Concepte de distància entre subjectes Agrupación jeràcquica aglomerativa Segmentación de individus Lectura de gràfic dendograma Classificació per k-means Altres mètodes de classificació 13.1 Cluster jerarquic 13.2 Cluster no jerarquic "],["acorresp.html", "Capítol 14 Análisis correspondencies", " Capítol 14 Análisis correspondencies Lanàlisi de correspondències i altres mètodes danàlisi multivariada Taules de contingència Conceptes de lanálisis de correspondències Inèrcia de la taula Dimensions principals Gràfics de lanàlisi de corresponències Més de dues variables categòriques Escalament òptim, Us descalament òptim en lSPSS. "],["referències.html", "Referències", " Referències "]]
